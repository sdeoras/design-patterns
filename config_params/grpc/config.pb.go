// Code generated by protoc-gen-go. DO NOT EDIT.
// source: config.proto

/*
Package params is a generated protocol buffer package.

It is generated from these files:
	config.proto

It has these top-level messages:
	Params
	Global
	Local
	Data
	Ack
*/
package params

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Params struct {
	G *Global  `protobuf:"bytes,1,opt,name=G" json:"G,omitempty"`
	L []*Local `protobuf:"bytes,2,rep,name=L" json:"L,omitempty"`
}

func (m *Params) Reset()                    { *m = Params{} }
func (m *Params) String() string            { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()               {}
func (*Params) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Params) GetG() *Global {
	if m != nil {
		return m.G
	}
	return nil
}

func (m *Params) GetL() []*Local {
	if m != nil {
		return m.L
	}
	return nil
}

type Global struct {
	I int32  `protobuf:"varint,1,opt,name=I" json:"I,omitempty"`
	B []byte `protobuf:"bytes,2,opt,name=B,proto3" json:"B,omitempty"`
}

func (m *Global) Reset()                    { *m = Global{} }
func (m *Global) String() string            { return proto.CompactTextString(m) }
func (*Global) ProtoMessage()               {}
func (*Global) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Global) GetI() int32 {
	if m != nil {
		return m.I
	}
	return 0
}

func (m *Global) GetB() []byte {
	if m != nil {
		return m.B
	}
	return nil
}

type Local struct {
	D float64 `protobuf:"fixed64,1,opt,name=D" json:"D,omitempty"`
	S string  `protobuf:"bytes,2,opt,name=S" json:"S,omitempty"`
}

func (m *Local) Reset()                    { *m = Local{} }
func (m *Local) String() string            { return proto.CompactTextString(m) }
func (*Local) ProtoMessage()               {}
func (*Local) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Local) GetD() float64 {
	if m != nil {
		return m.D
	}
	return 0
}

func (m *Local) GetS() string {
	if m != nil {
		return m.S
	}
	return ""
}

type Data struct {
	Value map[string]string `protobuf:"bytes,1,rep,name=Value" json:"Value,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Data) Reset()                    { *m = Data{} }
func (m *Data) String() string            { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()               {}
func (*Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Data) GetValue() map[string]string {
	if m != nil {
		return m.Value
	}
	return nil
}

type Ack struct {
}

func (m *Ack) Reset()                    { *m = Ack{} }
func (m *Ack) String() string            { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()               {}
func (*Ack) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func init() {
	proto.RegisterType((*Params)(nil), "params.Params")
	proto.RegisterType((*Global)(nil), "params.Global")
	proto.RegisterType((*Local)(nil), "params.Local")
	proto.RegisterType((*Data)(nil), "params.Data")
	proto.RegisterType((*Ack)(nil), "params.Ack")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Set service

type SetClient interface {
	Set(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Ack, error)
}

type setClient struct {
	cc *grpc.ClientConn
}

func NewSetClient(cc *grpc.ClientConn) SetClient {
	return &setClient{cc}
}

func (c *setClient) Set(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := grpc.Invoke(ctx, "/params.Set/Set", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Set service

type SetServer interface {
	Set(context.Context, *Data) (*Ack, error)
}

func RegisterSetServer(s *grpc.Server, srv SetServer) {
	s.RegisterService(&_Set_serviceDesc, srv)
}

func _Set_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SetServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/params.Set/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SetServer).Set(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

var _Set_serviceDesc = grpc.ServiceDesc{
	ServiceName: "params.Set",
	HandlerType: (*SetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Set",
			Handler:    _Set_Set_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config.proto",
}

func init() { proto.RegisterFile("config.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 247 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xc1, 0x4b, 0x84, 0x40,
	0x14, 0xc6, 0x79, 0xda, 0x08, 0xfb, 0xb4, 0x88, 0x47, 0x90, 0x6c, 0x1d, 0x64, 0x0a, 0xf2, 0x92,
	0x07, 0xbb, 0x2c, 0xdd, 0x76, 0x33, 0x64, 0xc1, 0x43, 0x8c, 0xd0, 0x7d, 0x56, 0x2c, 0x42, 0xdb,
	0x59, 0x6c, 0x0a, 0xf6, 0xbf, 0x8f, 0x79, 0x83, 0xd4, 0xc9, 0xf7, 0xbd, 0xdf, 0xe7, 0xfb, 0xc1,
	0x60, 0xd2, 0x99, 0xfd, 0xdb, 0xc7, 0x7b, 0x71, 0x98, 0x8c, 0x35, 0x14, 0x1d, 0xf4, 0xa4, 0x3f,
	0xbf, 0xe4, 0x13, 0x46, 0x2f, 0x3c, 0xd1, 0x35, 0x42, 0x9d, 0x42, 0x06, 0x79, 0x5c, 0x9e, 0x15,
	0x9e, 0x16, 0xf5, 0x68, 0x76, 0x7a, 0x54, 0x50, 0xd3, 0x15, 0x42, 0x93, 0x06, 0x59, 0x98, 0xc7,
	0xe5, 0xe9, 0x4c, 0x1b, 0xd3, 0x39, 0xd8, 0xc8, 0x5b, 0x8c, 0x7c, 0x93, 0x12, 0x84, 0x2d, 0x1f,
	0x11, 0x0a, 0xb6, 0x2e, 0x6d, 0xd2, 0x20, 0x83, 0x3c, 0x51, 0xb0, 0x91, 0x37, 0x28, 0xf8, 0x0f,
	0xb7, 0xae, 0xb8, 0x04, 0x0a, 0x2a, 0x97, 0x5a, 0x2e, 0x2d, 0x14, 0xb4, 0xd2, 0xe0, 0x49, 0xa5,
	0xad, 0xa6, 0x7b, 0x14, 0xaf, 0x7a, 0xfc, 0xee, 0x53, 0x60, 0xe7, 0xe5, 0xec, 0x74, 0xb0, 0x60,
	0xf2, 0xbc, 0xb7, 0xd3, 0x51, 0xf9, 0xd6, 0x72, 0x85, 0xf8, 0xb7, 0xa4, 0x73, 0x0c, 0x87, 0xfe,
	0xc8, 0x8a, 0x85, 0x72, 0x23, 0x5d, 0xa0, 0xf8, 0xe1, 0x73, 0x5e, 0xe4, 0xc3, 0x63, 0xb0, 0x02,
	0x29, 0x30, 0x5c, 0x77, 0x43, 0x79, 0x87, 0x61, 0xdb, 0x5b, 0xca, 0xfc, 0x27, 0xf9, 0xaf, 0x5b,
	0xc6, 0x73, 0x5a, 0x77, 0xc3, 0x2e, 0xe2, 0xf7, 0x7b, 0xf8, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xe2,
	0x87, 0x98, 0x6f, 0x4f, 0x01, 0x00, 0x00,
}
