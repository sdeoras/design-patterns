// Code generated by protoc-gen-go. DO NOT EDIT.
// source: config.proto

/*
Package confgrpc is a generated protocol buffer package.

confgrpc defines a simple interface to sending byte[] over
grpc

It is generated from these files:
	config.proto

It has these top-level messages:
	Data
	Ack
*/
package confgrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Data struct {
	Buffer []byte `protobuf:"bytes,1,opt,name=Buffer,proto3" json:"Buffer,omitempty"`
	Index  int32  `protobuf:"varint,2,opt,name=Index" json:"Index,omitempty"`
}

func (m *Data) Reset()                    { *m = Data{} }
func (m *Data) String() string            { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()               {}
func (*Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Data) GetBuffer() []byte {
	if m != nil {
		return m.Buffer
	}
	return nil
}

func (m *Data) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type Ack struct {
	N int64 `protobuf:"varint,1,opt,name=n" json:"n,omitempty"`
}

func (m *Ack) Reset()                    { *m = Ack{} }
func (m *Ack) String() string            { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()               {}
func (*Ack) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Ack) GetN() int64 {
	if m != nil {
		return m.N
	}
	return 0
}

func init() {
	proto.RegisterType((*Data)(nil), "confgrpc.Data")
	proto.RegisterType((*Ack)(nil), "confgrpc.Ack")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Set service

type SetClient interface {
	GlobalParams(ctx context.Context, opts ...grpc.CallOption) (Set_GlobalParamsClient, error)
	LocalParams(ctx context.Context, opts ...grpc.CallOption) (Set_LocalParamsClient, error)
}

type setClient struct {
	cc *grpc.ClientConn
}

func NewSetClient(cc *grpc.ClientConn) SetClient {
	return &setClient{cc}
}

func (c *setClient) GlobalParams(ctx context.Context, opts ...grpc.CallOption) (Set_GlobalParamsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Set_serviceDesc.Streams[0], c.cc, "/confgrpc.Set/GlobalParams", opts...)
	if err != nil {
		return nil, err
	}
	x := &setGlobalParamsClient{stream}
	return x, nil
}

type Set_GlobalParamsClient interface {
	Send(*Data) error
	CloseAndRecv() (*Ack, error)
	grpc.ClientStream
}

type setGlobalParamsClient struct {
	grpc.ClientStream
}

func (x *setGlobalParamsClient) Send(m *Data) error {
	return x.ClientStream.SendMsg(m)
}

func (x *setGlobalParamsClient) CloseAndRecv() (*Ack, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Ack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *setClient) LocalParams(ctx context.Context, opts ...grpc.CallOption) (Set_LocalParamsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Set_serviceDesc.Streams[1], c.cc, "/confgrpc.Set/LocalParams", opts...)
	if err != nil {
		return nil, err
	}
	x := &setLocalParamsClient{stream}
	return x, nil
}

type Set_LocalParamsClient interface {
	Send(*Data) error
	CloseAndRecv() (*Ack, error)
	grpc.ClientStream
}

type setLocalParamsClient struct {
	grpc.ClientStream
}

func (x *setLocalParamsClient) Send(m *Data) error {
	return x.ClientStream.SendMsg(m)
}

func (x *setLocalParamsClient) CloseAndRecv() (*Ack, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Ack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Set service

type SetServer interface {
	GlobalParams(Set_GlobalParamsServer) error
	LocalParams(Set_LocalParamsServer) error
}

func RegisterSetServer(s *grpc.Server, srv SetServer) {
	s.RegisterService(&_Set_serviceDesc, srv)
}

func _Set_GlobalParams_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SetServer).GlobalParams(&setGlobalParamsServer{stream})
}

type Set_GlobalParamsServer interface {
	SendAndClose(*Ack) error
	Recv() (*Data, error)
	grpc.ServerStream
}

type setGlobalParamsServer struct {
	grpc.ServerStream
}

func (x *setGlobalParamsServer) SendAndClose(m *Ack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *setGlobalParamsServer) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Set_LocalParams_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SetServer).LocalParams(&setLocalParamsServer{stream})
}

type Set_LocalParamsServer interface {
	SendAndClose(*Ack) error
	Recv() (*Data, error)
	grpc.ServerStream
}

type setLocalParamsServer struct {
	grpc.ServerStream
}

func (x *setLocalParamsServer) SendAndClose(m *Ack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *setLocalParamsServer) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Set_serviceDesc = grpc.ServiceDesc{
	ServiceName: "confgrpc.Set",
	HandlerType: (*SetServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GlobalParams",
			Handler:       _Set_GlobalParams_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "LocalParams",
			Handler:       _Set_LocalParams_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "config.proto",
}

func init() { proto.RegisterFile("config.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 163 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0xce, 0xcf, 0x4b,
	0xcb, 0x4c, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x00, 0xf1, 0xd2, 0x8b, 0x0a, 0x92,
	0x95, 0x4c, 0xb8, 0x58, 0x5c, 0x12, 0x4b, 0x12, 0x85, 0xc4, 0xb8, 0xd8, 0x9c, 0x4a, 0xd3, 0xd2,
	0x52, 0x8b, 0x24, 0x18, 0x15, 0x18, 0x35, 0x78, 0x82, 0xa0, 0x3c, 0x21, 0x11, 0x2e, 0x56, 0xcf,
	0xbc, 0x94, 0xd4, 0x0a, 0x09, 0x26, 0x05, 0x46, 0x0d, 0xd6, 0x20, 0x08, 0x47, 0x49, 0x98, 0x8b,
	0xd9, 0x31, 0x39, 0x5b, 0x88, 0x87, 0x8b, 0x31, 0x0f, 0xac, 0x9e, 0x39, 0x88, 0x31, 0xcf, 0x28,
	0x8d, 0x8b, 0x39, 0x38, 0xb5, 0x44, 0x48, 0x9f, 0x8b, 0xc7, 0x3d, 0x27, 0x3f, 0x29, 0x31, 0x27,
	0x20, 0xb1, 0x28, 0x31, 0xb7, 0x58, 0x88, 0x4f, 0x0f, 0x66, 0x99, 0x1e, 0xc8, 0x26, 0x29, 0x5e,
	0x04, 0xdf, 0x31, 0x39, 0x5b, 0x83, 0x51, 0x48, 0x8f, 0x8b, 0xdb, 0x27, 0x3f, 0x99, 0x68, 0xf5,
	0x49, 0x6c, 0x60, 0x3f, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x6b, 0x89, 0xc4, 0x0f, 0xd3,
	0x00, 0x00, 0x00,
}
